name: Build SharpRDP

on:
  push:
    branches: [ master, main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET Framework
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
      
    - name: Find project file
      id: find_project
      run: |
        $csproj = Get-ChildItem -Path . -Filter "*.csproj" -Recurse | Select-Object -First 1
        if ($csproj) {
          echo "PROJECT_FILE=$($csproj.FullName)" >> $env:GITHUB_OUTPUT
          echo "Found project file: $($csproj.FullName)"
        } else {
          Write-Error "No .csproj file found"
          exit 1
        }
      shell: powershell
      
    - name: Restore NuGet packages
      run: nuget restore "${{ steps.find_project.outputs.PROJECT_FILE }}"
      
    - name: Build Release
      run: msbuild "${{ steps.find_project.outputs.PROJECT_FILE }}" /p:Configuration=Release /p:Platform="Any CPU"
      
    - name: Find output directory
      id: find_output
      run: |
        $projectDir = Split-Path "${{ steps.find_project.outputs.PROJECT_FILE }}" -Parent
        $outputDir = Join-Path $projectDir "bin\Release"
        echo "OUTPUT_DIR=$outputDir" >> $env:GITHUB_OUTPUT
        echo "Output directory: $outputDir"
      shell: powershell
      
    - name: List build output
      run: |
        Write-Host "Contents of output directory:"
        Get-ChildItem -Path "${{ steps.find_output.outputs.OUTPUT_DIR }}" -Recurse | ForEach-Object {
          Write-Host $_.FullName
        }
      shell: powershell
      
    - name: Create artifacts directory
      run: mkdir artifacts
      
    - name: Copy artifacts
      run: |
        $outputDir = "${{ steps.find_output.outputs.OUTPUT_DIR }}"
        
        # Copy SharpRDP.exe
        $exeFiles = Get-ChildItem -Path $outputDir -Filter "*.exe" -Recurse
        foreach ($exe in $exeFiles) {
          Copy-Item $exe.FullName -Destination artifacts\
          Write-Host "Copied: $($exe.Name)"
        }
        
        # Copy DLL files if they exist
        $dllFiles = Get-ChildItem -Path $outputDir -Filter "*.dll" -Recurse -ErrorAction SilentlyContinue
        foreach ($dll in $dllFiles) {
          Copy-Item $dll.FullName -Destination artifacts\
          Write-Host "Copied: $($dll.Name)"
        }
        
        # Copy compressed DLL files if they exist
        $binFiles = Get-ChildItem -Path $outputDir -Filter "*.dll.bin" -Recurse -ErrorAction SilentlyContinue
        foreach ($bin in $binFiles) {
          Copy-Item $bin.FullName -Destination artifacts\
          Write-Host "Copied: $($bin.Name)"
        }
      shell: powershell
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SharpRDP-Release
        path: artifacts/
        retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (contains(github.ref, 'refs/heads/master') || contains(github.ref, 'refs/heads/main'))
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: SharpRDP-Release
        path: ./release
        
    - name: Create ZIP archive
      run: |
        cd release
        zip -r ../SharpRDP-Release.zip *
        cd ..
        
    - name: Generate build info
      run: |
        echo "# SharpRDP Release Build ${{ github.run_number }}" > release-notes.md
        echo "" >> release-notes.md
        echo "**Build Date:** $(date)" >> release-notes.md
        echo "**Commit SHA:** ${{ github.sha }}" >> release-notes.md
        echo "**Commit Message:** ${{ github.event.head_commit.message }}" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Usage" >> release-notes.md
        echo "Regular RDP connection: \`SharpRDP.exe computername=target.domain command=\"C:\\Temp\\file.exe\" username=domain\\user password=password\`" >> release-notes.md
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v1.0.${{ github.run_number }}
        name: SharpRDP Release v1.0.${{ github.run_number }}
        body_path: ./release-notes.md
        draft: false
        prerelease: false
        files: |
          SharpRDP-Release.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-with-aximp:
    runs-on: windows-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET Framework
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup Windows SDK
      uses: ChristopheLav/windows-sdk-install@v1
      with:
        version-sdk: 19041
        
    - name: Generate Interop DLLs using aximp
      run: |
        # Try multiple possible locations for aximp.exe
        $possiblePaths = @(
          "${env:ProgramFiles(x86)}\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\aximp.exe",
          "${env:ProgramFiles(x86)}\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.7.2 Tools\aximp.exe",
          "${env:ProgramFiles(x86)}\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools\aximp.exe",
          "${env:ProgramFiles}\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\aximp.exe"
        )
        
        $aximp = $null
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            $aximp = $path
            Write-Host "Found aximp.exe at: $aximp"
            break
          }
        }
        
        if ($aximp) {
          & $aximp "$env:windir\system32\mstscax.dll"
          Write-Host "Generated Interop DLLs successfully"
        } else {
          Write-Host "aximp.exe not found in any expected location"
          Write-Host "Attempting to use existing DLLs from the project"
        }
      shell: powershell
      
    - name: Compress DLLs
      run: |
        Add-Type -AssemblyName System.IO.Compression
        
        $files = @("AxInterop.MSTSCLib.dll", "Interop.MSTSCLib.dll")
        foreach ($file in $files) {
          if (Test-Path $file) {
            $bytes = [System.IO.File]::ReadAllBytes($file)
            $ms = New-Object System.IO.MemoryStream
            $ds = New-Object System.IO.Compression.DeflateStream($ms, [System.IO.Compression.CompressionMode]::Compress)
            $ds.Write($bytes, 0, $bytes.Length)
            $ds.Close()
            [System.IO.File]::WriteAllBytes("$file.bin", $ms.ToArray())
            Write-Host "Compressed $file to $file.bin"
          } else {
            Write-Host "Warning: $file not found"
          }
        }
      shell: powershell
      
    - name: Find and build project
      run: |
        $csproj = Get-ChildItem -Path . -Filter "*.csproj" -Recurse | Select-Object -First 1
        if ($csproj) {
          Write-Host "Building project: $($csproj.FullName)"
          msbuild $csproj.FullName /p:Configuration=Release /p:Platform="Any CPU"
        } else {
          Write-Error "No .csproj file found"
          exit 1
        }
      shell: powershell
      
    - name: Collect all artifacts
      run: |
        mkdir custom-artifacts
        
        # Find and copy exe files
        Get-ChildItem -Path . -Filter "*.exe" -Recurse | Where-Object { $_.DirectoryName -like "*bin*Release*" } | ForEach-Object {
          Copy-Item $_.FullName -Destination custom-artifacts\
        }
        
        # Copy compressed DLLs
        Get-ChildItem -Path . -Filter "*.dll.bin" | ForEach-Object {
          Copy-Item $_.FullName -Destination custom-artifacts\
        }
      shell: powershell
      
    - name: Upload build with custom DLLs
      uses: actions/upload-artifact@v4
      with:
        name: SharpRDP-CustomDLLs
        path: custom-artifacts/
        retention-days: 30
