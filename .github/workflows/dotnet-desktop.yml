# 工作流名称
name: Build SharpRDP Project

# 工作流触发条件
on:
  # 当有代码推送到 master 分支时触发
  push:
    branches: [ "master" ]
  # 当有针对 master 分支的拉取请求时触发
  pull_request:
    branches: [ "master" ]
  # 允许在 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:

jobs:
  # 定义一个名为 "build" 的任务
  build:
    # 指定任务运行在最新版的 Windows 服务器上
    # 这是必要的，因为 SharpRDP 是一个基于 Windows 和 .NET Framework 的项目
    runs-on: windows-latest

    steps:
      # 第一步：检出代码
      # 使用 actions/checkout@v4 拉取仓库的最新代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：设置 MSBuild 环境
      # 使用 microsoft/setup-msbuild@v2 操作来查找 MSBuild.exe 并将其添加到系统路径中
      # 这是在命令行中执行构建所必需的
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      # 第三步：恢复 NuGet 包
      # 在编译之前，需要使用 nuget restore 命令来下载项目所需的所有依赖项
      - name: Restore NuGet packages
        run: nuget restore SharpRDP/SharpRDP.sln

      # 第四步：编译解决方案
      # 使用 msbuild 命令来编译项目
      # /p:Configuration=Release 参数确保我们构建的是“Release”版本，这与 README 中的指导一致
      - name: Build the solution
        run: msbuild SharpRDP/SharpRDP.sln /p:Configuration=Release

      # 第五步：上传构建产物
      # 使用 actions/upload-artifact@v4 操作将编译生成的文件打包上传
      # 这样，在工作流运行结束后，您可以直接从运行记录中下载编译好的 SharpRDP.exe 文件
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          # 设置产物的名称
          name: SharpRDP-Release-Build
          # 指定需要上传的文件路径，即 Release 版本的输出目录
          path: SharpRDP/bin/Release/
